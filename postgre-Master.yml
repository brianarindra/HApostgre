---
# Playbook 1: PostgreSQL 16 Master + PgBouncer (Ubuntu)

- name: Deploy PostgreSQL 16 Master (production)
  hosts: master
  vars:
    postgres_version: 16
    postgres_port: 5432
    postgres_listen_addresses: '*'
    postgres_max_connections: 300

    postgres_admin_user: postgres
    postgres_db_name: appdb
    postgres_admin_password: "{{ vault_postgres_admin_password | default('changeme') }}"
    app_db_user: app_user
    app_db_password: "{{ vault_app_db_password | default('changeme_app') }}"

    replication_user: repl_user
    replication_password: "{{ vault_repl_password | default('changeme_repl') }}"

    pgbouncer_listen_addr: '0.0.0.0'
    pgbouncer_listen_port: 6432
    pgbouncer_pool_mode: transaction
    pgbouncer_default_pool_size: 20
    pgbouncer_max_client_conn: 1000

  tasks:
    - name: Install PostgreSQL 16 and PgBouncer
      apt:
        name:
          - postgresql-{{ postgres_version }}
          - postgresql-contrib
          - pgbouncer
          - python3-passlib
          - python3-psycopg2
        state: present
        update_cache: yes

    - name: Configure postgresql.conf (master)
      lineinfile:
        path: "/etc/postgresql/{{ postgres_version }}/main/postgresql.conf"
        regexp: '^#?{{ item.key }}\s*='
        line: "{{ item.key }} = {{ item.value }}"
        backrefs: yes
      loop:
        - { key: 'listen_addresses', value: 'localhost' }
        - { key: 'port', value: postgres_port }
        - { key: 'max_connections', value: postgres_max_connections }
        - { key: 'wal_level', value: "replica" }
        - { key: 'max_wal_senders', value: 10 }
        - { key: 'wal_keep_size', value: '64MB' }
      notify: Restart postgresql

    - name: Configure pg_hba.conf for replication and app networks
      copy:
        dest: "/etc/postgresql/{{ postgres_version }}/main/pg_hba.conf"
        content: |
          # Replication user access
          host    replication     {{ replication_user }}    0.0.0.0/0    md5
      notify: Restart postgresql

    - name: Wait for PostgreSQL socket to be ready
      wait_for:
        path: /var/run/postgresql/.s.PGSQL.5432
        state: present
        timeout: 30
        
    - name: Ensure replication user exists
      postgresql_user:
        name: "{{ replication_user }}"
        password: "{{ replication_password }}"
        role_attr_flags: REPLICATION,LOGIN
      become_user: postgres

    - name: Ensure app user exists
      postgresql_user:
        name: "{{ app_db_user }}"
        password: "{{ app_db_password }}"
        role_attr_flags: CREATEDB,LOGIN
      become_user: postgres

    - name: Ensure application database exists
      community.postgresql.postgresql_db:
        name: "{{ postgres_db_name }}"
        owner: "{{ app_db_user }}"
      become_user: postgres

    # --- PgBouncer configuration ---
    - name: Ensure pgbouncer config directory exists
      file:
        path: /etc/pgbouncer
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Create pgbouncer.ini
      copy:
        dest: /etc/pgbouncer/pgbouncer.ini
        owner: root
        group: root
        mode: '0644'
        content: |
          [databases]
          {{ postgres_db_name }} = host=127.0.0.1 port={{ postgres_port }} dbname={{ postgres_db_name }} user={{ app_db_user }}

          [pgbouncer]
          listen_addr = {{ pgbouncer_listen_addr }}
          listen_port = {{ pgbouncer_listen_port }}
          auth_type = md5
          auth_file = /etc/pgbouncer/userlist.txt
          admin_users = {{ postgres_admin_user }}
          pool_mode = {{ pgbouncer_pool_mode }}
          default_pool_size = {{ pgbouncer_default_pool_size }}
          max_client_conn = {{ pgbouncer_max_client_conn }}

      notify: Restart pgbouncer

    - name: Generate userlist.txt for PgBouncer
      shell: |
        set -e
        python3 - <<'PY'
        import hashlib
        user = "{{ app_db_user }}"
        password = "{{ app_db_password }}"
        md5 = hashlib.md5((password + user).encode()).hexdigest()
        print('"%s" "md5%s"' % (user, md5))
        PY
      register: pgb_userlist
      changed_when: pgb_userlist.stdout != ''

    - name: Write PgBouncer userlist
      copy:
        dest: /etc/pgbouncer/userlist.txt
        content: "{{ pgb_userlist.stdout }}\n"
        owner: root
        group: root
        mode: '0600'
      notify: Restart pgbouncer

    - name: Ensure PostgreSQL is enabled and started
      service:
        name: postgresql
        state: started
        enabled: yes

    - name: Ensure PgBouncer is enabled and started
      service:
        name: pgbouncer
        state: started
        enabled: yes

  handlers:
    - name: Restart postgresql
      service:
        name: postgresql
        state: restarted

    - name: Restart pgbouncer
      service:
        name: pgbouncer
        state: restarted

