---
- name: Setup PostgreSQL 16 + PgBouncer (Production-Minded)
  hosts: master
  vars:
    # ---- Jaringan ----
    slave_cidr: "192.168.200.0/24"     # jaringan standby/replica
    client_cidr: "10.10.0.0/16"        # jaringan aplikasi/klien (ganti sesuai)
    listen_addr: "*"                   # prod: batasi di firewall

    # ---- Versi & Path ----
    pg_version: "16"
    pg_conf_dir: "/etc/postgresql/16/main"
    pg_data_dir: "/var/lib/postgresql/16/main"
    wal_archive_dir: "/var/lib/postgresql/wal_archive"

    # ---- Users ----
    postgres_admin_user: "postgres"
    replication_user: "replicator"
    pgbouncer_auth_user: "pgbouncer_auth"  # user khusus untuk auth_query

    # ---- Password (gunakan Ansible Vault!) ----
    postgres_admin_password: "{{ vault_postgres_admin_password }}"
    replication_password: "{{ vault_replication_password }}"
    pgbouncer_auth_password: "{{ vault_pgbouncer_auth_password }}"

    # ---- PgBouncer ----
    pgbouncer_listen_addr: "0.0.0.0"
    pgbouncer_listen_port: 6432
    pgbouncer_pool_mode: "session"   # "transaction" sering lebih efisien utk web
    pgbouncer_default_pool_size: 20
    pgbouncer_max_client_conn: 200
    pgbouncer_auth_type: "scram-sha-256"

    # Database yang diproksikan
    pgbouncer_databases:
      - { name: "postgres", host: "127.0.0.1", port: 5432 }
      - { name: "appdb",   host: "127.0.0.1", port: 5432 }

  pre_tasks:
    - name: Install base packages
      apt:
        name:
          - postgresql-16
          - postgresql-client-16
          - python3-psycopg2
          - pgbouncer
          - python3-passlib
          - acl
        state: present
        update_cache: yes

    - name: Ensure postgres system user exists (idempotent)
      user:
        name: postgres
        shell: /usr/sbin/nologin
        home: /var/lib/postgresql
        system: yes
        create_home: yes

    - name: Create WAL archive directory
      file:
        path: "{{ wal_archive_dir }}"
        state: directory
        owner: postgres
        group: postgres
        mode: "0700"

  tasks:
    # ---- PostgreSQL configs (pakai module agar idempotent) ----
    - name: Configure postgresql.conf for production
      lineinfile:
        path: "/etc/postgresql/16/main/postgresql.conf"
        regexp: "^#?{{ item.key }}\\s*="
        line: "{{ item.key }} = {{ item.value }}"
      loop:
        - { key: "listen_addresses", value: "'*'" }
        - { key: "wal_level", value: "replica" }
        - { key: "archive_mode", value: "on" }
        - { key: "archive_command", value: "'test -f {{ wal_archive_dir }}/%f || cp %p {{ wal_archive_dir }}/%f'" }
        - { key: "max_wal_senders", value: "10" }
        - { key: "wal_keep_size", value: "256MB" }
        - { key: "hot_standby", value: "on" }
        - { key: "password_encryption", value: "scram-sha-256" }
        - { key: "logging_collector", value: "on" }
        - { key: "log_directory", value: "'log'" }
        - { key: "log_filename", value: "'postgresql-%a.log'" }
        - { key: "log_truncate_on_rotation", value: "on" }
        - { key: "log_rotation_age", value: "'1d'" }
        - { key: "log_line_prefix", value: "'%m [%p] %q%u@%d '" }
        - { key: "max_connections", value: "200" }
      notify: Restart PostgreSQL


    - name: Ensure pg_hba.conf rules (replication + client with scram)
      blockinfile:
        path: "{{ pg_conf_dir }}/pg_hba.conf"
        marker: "# {mark} ANSIBLE MANAGED BLOCK (prod rules)"
        block: |
          # Replication from standby nodes
          host    replication  {{ replication_user }}   {{ slave_cidr }}   scram-sha-256

          # Client access to databases from app network
          host    all          all                      {{ client_cidr }}  scram-sha-256

          # Local socket
          local   all          all                                      scram-sha-256
      notify: Reload PostgreSQL

    - name: Wait for PostgreSQL socket
      wait_for:
        path: "/var/run/postgresql/.s.PGSQL.5432"
        state: present
        timeout: 30

    - name: Set password & attributes for postgres superuser
      become_user: postgres
      community.postgresql.postgresql_user:
        name: "{{ postgres_admin_user }}"
        password: "{{ postgres_admin_password }}"
        role_attr_flags: "SUPERUSER,CREATEDB,CREATEROLE,LOGIN"
        login_unix_socket: /var/run/postgresql

    - name: Ensure replication user (scram)
      become_user: postgres
      community.postgresql.postgresql_user:
        name: "{{ replication_user }}"
        password: "{{ replication_password }}"
        role_attr_flags: "REPLICATION,LOGIN"
        login_unix_socket: /var/run/postgresql

    - name: Create PgBouncer auth user (non-superuser) for auth_query
      become_user: postgres
      community.postgresql.postgresql_user:
        name: "{{ pgbouncer_auth_user }}"
        password: "{{ pgbouncer_auth_password }}"
        role_attr_flags: "LOGIN"
        login_unix_socket: /var/run/postgresql

    - name: Create helper VIEW for PgBouncer SCRAM auth (if not exists)
      become_user: postgres
      community.postgresql.postgresql_query:
        db: "postgres"
        login_unix_socket: /var/run/postgresql
        query: |
          DO $$
          BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_class c JOIN pg_namespace n
                           ON n.oid=c.relnamespace
                           WHERE n.nspname='public' AND c.relname='pgbouncer_users') THEN
              CREATE VIEW public.pgbouncer_users AS
              SELECT usename AS username, passwd AS password
              FROM pg_catalog.pg_shadow;
              REVOKE ALL ON public.pgbouncer_users FROM PUBLIC;
              GRANT SELECT ON public.pgbouncer_users TO "{{ pgbouncer_auth_user }}";
            END IF;
          END$$;

    # ---- PgBouncer config dengan auth_query (SCRAM) ----
    - name: Generate pgbouncer.ini
      copy:
        dest: /etc/pgbouncer/pgbouncer.ini
        owner: pgbouncer
        group: pgbouncer
        mode: "0600"
        content: |
          [databases]
          {% for db in pgbouncer_databases %}
          {{ db.name }} = host={{ db.host }} port={{ db.port }}
          {% endfor %}

          [pgbouncer]
          listen_addr = {{ pgbouncer_listen_addr }}
          listen_port = {{ pgbouncer_listen_port }}
          auth_type   = {{ pgbouncer_auth_type }}
          # Auth via query ke view yang kita buat
          auth_query  = SELECT username, password FROM public.pgbouncer_users WHERE username=$1
          pool_mode   = {{ pgbouncer_pool_mode }}
          max_client_conn   = {{ pgbouncer_max_client_conn }}
          default_pool_size = {{ pgbouncer_default_pool_size }}
          log_connections = 1
          log_disconnections = 1
          # Startup parameters agar kompatibel:
          ignore_startup_parameters = extra_float_digits

    - name: Ensure pgbouncer service file perms are strict
      file:
        path: /etc/pgbouncer
        state: directory
        owner: pgbouncer
        group: pgbouncer
        mode: "0750"

    - name: Ensure PgBouncer started and enabled
      service:
        name: pgbouncer
        state: started
        enabled: yes

  handlers:
    - name: Reload PostgreSQL
      service:
        name: postgresql
        state: reloaded

    - name: Restart PostgreSQL
      service:
        name: postgresql
        state: restarted
