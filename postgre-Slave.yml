---
- name: Setup PostgreSQL Slave
  hosts: slave
  vars:
    replication_user: replicator
    replication_password: "passwordku"
    master_ip: 192.168.200.127   # ganti sesuai IP master
    postgres_user: postgres
    postgres_password: "prodpassword"
    client_ips:
      - 0.0.0.0/0   # contoh laptop/public IP

    pgbouncer_listen_port: 6432
    pgbouncer_listen_addr: "0.0.0.0"

    pgbouncer_auth_type: "md5"
    pgbouncer_pool_mode: "session"
    pgbouncer_default_pool_size: 20

    pgbouncer_users:
      - { name: "postgres", password: "prodpassword" }
      - { name: "app_user", password: "abc123" }

    pgbouncer_databases:
      - { name: "postgres", host: "127.0.0.1", port: 5432 }
      - { name: "appdb", host: "127.0.0.1", port: 5432 }

  tasks:
    - name: Ensure postgres user exists
      ansible.builtin.user:
        name: postgres
        shell: /bin/false
        home: /var/lib/postgresql
        system: yes
        create_home: yes

    - name: Install PostgreSQL 16 and psycopg2
      apt:
        name:
          - postgresql-16
          - python3-psycopg2
          - pgbouncer
          - python3-passlib
        state: present
        update_cache: yes

    - name: Stop PostgreSQL on slave
      service:
        name: postgresql
        state: stopped

    - name: Check if data directory exists on slave
      stat:
        path: /var/lib/postgresql/16/main/standby.signal
      register: pgdata

    - name: Remove old PostgreSQL data directory if not replica
      file:
        path: /var/lib/postgresql/16/main
        state: absent
      when: not pgdata.stat.exists

    - name: Base backup from master (only if data directory is empty)
      become_user: postgres
      command: >
        pg_basebackup -h {{ master_ip }} -U {{ replication_user }}
        -D /var/lib/postgresql/16/main -Fp -Xs -P -R 
      environment:
        PGPASSWORD: "{{ replication_password }}"
      when: not pgdata.stat.exists

    - name: Fix ownership of PostgreSQL data directory
      file:
        path: /var/lib/postgresql/16/main
        owner: postgres
        group: postgres
        recurse: yes

    - name: Configure postgresql.conf to listen on all IPs
      lineinfile:
        path: /etc/postgresql/16/main/postgresql.conf
        regexp: '^#?listen_addresses'
        line: "listen_addresses = '*'"

    - name: Enable hot standby on slave
      lineinfile:
        path: /etc/postgresql/16/main/postgresql.conf
        regexp: '^#?hot_standby'
        line: "hot_standby = on"
      notify: Restart PostgreSQL
      
    - name: Configure pg_hba.conf for replication
      blockinfile:
        path: /etc/postgresql/16/main/pg_hba.conf
        block: |
          # Allow replication from slave
          host replication {{ replication_user }} {{ ansible_host }}/32 md5
      notify: Restart PostgreSQL

    # - name: Configure pg_hba.conf for client access
    #   blockinfile:
    #     path: /etc/postgresql/16/main/pg_hba.conf
    #     block: |
    #       # Allow client access
    #       {% for ip in client_ips %}
    #       host all {{ postgres_user }} {{ ip }} md5
    #       {% endfor %}
    #   notify: Restart PostgreSQL

    - name: Start PostgreSQL on slave
      service:
        name: postgresql
        state: started

    - name: Generate pgbouncer.ini
      copy:
        dest: /etc/pgbouncer/pgbouncer.ini
        content: |
          [databases]
          {% for db in pgbouncer_databases %}
          {{ db.name }} = host={{ db.host }} port={{ db.port }} auth_user=postgres
          {% endfor %}

          [pgbouncer]
          listen_addr = {{ pgbouncer_listen_addr }}
          listen_port = {{ pgbouncer_listen_port }}
          auth_type = {{ pgbouncer_auth_type }}
          auth_file = /etc/pgbouncer/userlist.txt
          pool_mode = {{ pgbouncer_pool_mode }}
          max_client_conn = 100
          default_pool_size = {{ pgbouncer_default_pool_size }}
          log_connections = 1
          log_disconnections = 1
      notify: restart package

    - name: Generate userlist.txt
      copy:
        dest: /etc/pgbouncer/userlist.txt
        content: |
          {% for u in pgbouncer_users %}
          "{{ u.name }}" "{{ u.password }}"
          {% endfor %}
      notify: restart package


  handlers:
    - name: Restart PostgreSQL
      service:
        name: postgresql
        state: restarted

    - name: restart package
      service:
        name: pgbouncer
        state: restarted
